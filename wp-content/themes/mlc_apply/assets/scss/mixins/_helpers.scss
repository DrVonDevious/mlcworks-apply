/*
* Remove First & Last Margin
* - Generally used when needing to remove margin of last child element to keep consistent spacing
*/
@mixin remove_first_last_margin(){
	&:first-child{
		margin-top: 0;
		padding-top: 0;
	}
	&:last-child{
		margin-bottom: 0;
		padding-bottom: 0;
	}
}


/*Keyframe*/
@mixin keyframe ($animation_name) {
	@-webkit-keyframes $animation_name {
		@content;
	}

	@-moz-keyframes $animation_name {
		@content;
	}

	@-o-keyframes $animation_name {
		@content;
	}

	@keyframes $animation_name {
		@content;
	}
}

@mixin highlightcolor($color){
	::selection {
	  background: $color; /* WebKit/Blink Browsers */
	}
	::-moz-selection {
	  background: $color; /* Gecko Browsers */
	}
}
@mixin rem($property, $values) {
	// Create a couple of empty lists as output buffers.
	$font-size: $default-font-size;
	$px-values: ();
	$rem-values: ();

	// Loop through the $values list
	@each $value in $values {
		// For each property value, if it's in rem or px, derive both rem and
		// px values for it and add those to the end of the appropriate buffer.
		// Ensure all pixel values are rounded to the nearest pixel.
		@if $value == 0 or $value == 0px {
			// 0 -- use it without a unit
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			// px value given - calculate rem value from font-size
			$new-rem-value: $value / $font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			// % value given - don't add px or rem
			$px-values: join($px-values, #{$value});
			$rem-values: join($rem-values, #{$value});
		} @else if $value == auto {
			// auto - don't add px or rem
			$px-values: join($px-values, auto);
			$rem-values: join($rem-values, auto);
		} @else {
			// unitless value - use those directly as rem and calculate the px-fallback
			$px-values: join($px-values, round($value * $font-size));
			$rem-values: join($rem-values, #{$value}rem);
		}
	}

	// output the converted rules
	#{$property}: $px-values;
	#{$property}: $rem-values;
}



@mixin placeholder-color($color){
	&::-webkit-input-placeholder {
		color: $color;
	}
	&:-moz-placeholder {
		color: $color;
	}
	&::-moz-placeholder {
		color: $color;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}
